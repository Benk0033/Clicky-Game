{"version":3,"sources":["components/Title/title.js","components/Scoreboard/scoreboard.js","components/GameCard/gamecard.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","children","Scoreboard","this","score","topScore","Component","GameCard","_this","key","id","data-id","onClick","shuffle","char","handleScores","src","image","alt","name","Footer","App","state","dbzChars","topScoreArr","alreadyclicked","arr","i","length","j","Math","floor","random","_ref","setState","prevState","concat","Object","toConsumableArray","indexOf","max","apply","_this2","Scoreboard_scoreboard","Title_title","map","GameCard_gamecard","Footer_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4e3d110.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./title.css\";\n\nconst Title = (props) => {\n    return (\n        <div>\n            <h1 className=\"title\">{props.children}</h1>\n            <h2 className=\"game-details\">Click on an image to earn points, but don't click on any more than once!</h2>\n        </div>\n    );\n}\n\nexport default Title;","import React, { Component } from \"react\";\nimport \"./scoreboard.css\";\n\nconst beginMessage = \"Click and image to begin!\";\nconst winMessage = \"You guessed correctly!\";\nconst loseMessage = \"You guessed incorrectly!\";\n\nclass Scoreboard extends Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.handleIncrement = this.handleIncrement.bind(this)\n    // }\n\n    // state = {\n    //     score: 0,\n    //     topScore: 0\n    // }\n\n    // handleIncrement = () => {\n    //     this.setState({ score: this.state.score + 1 });\n    // };\n\n\n    render() {\n\n        return (\n            <div>\n                <nav className=\"navbar fixed-top navbar-dark bg-primary\">\n                    <span className=\"navbar-text logo\">\n                        Clicky Game\n                    </span>\n                    <span className=\"navbar-text message\">\n                        {(this.props.score === 0 && this.props.topScore === 0) ? beginMessage\n                            : this.props.score > 0 ? winMessage\n                                : loseMessage}\n                    </span>\n                    <span className=\"navbar-text scores\">\n                        Score: {this.props.score} | Top Score: {this.props.topScore}\n                    </span>\n                </nav>\n            </div>\n        )\n    }\n};\n\n// const Scoreboard = (props) => {\n//     return (\n//         <div>\n//             <nav className=\"navbar sticky-top navbar-dark bg-primary\">\n//                 <span className=\"navbar-text\">\n//                     Clicky Game\n//                 </span>\n//                 <span className=\"navbar-text\">\n//                     Click an image to begin!\n//                 </span>\n//                 <span className=\"navbar-text\">\n//                     Score: {props.score} | Top Score: 0\n//                 </span>\n//             </nav>\n//         </div>\n//     )\n// }\n\nexport default Scoreboard;","import React, { Component } from \"react\";\nimport \"./gamecard.css\";\n\nclass GameCard extends Component {\n\n    // constructor(props) {\n    //     super(props);\n    // this.handleIncrement = this.handleIncrement.bind(this)\n    // }\n\n    // handleIncrement() {\n    //     this.props.sendFunction();\n    // }\n\n    // state = {\n    //     dbzChars\n    // };\n\n    // shuffle = arr => {\n    //     for (let i = arr.length - 1; i > 0; i--) {\n    //         let j = Math.floor(Math.random() * (i + 1));\n    //         [arr[i], arr[j]] = [arr[j], arr[i]];\n    //     }\n\n    //     this.setState({ arr });\n    // };\n\n    render() {\n        return (\n            <div className=\"card\" key={this.props.id} data-id={this.props.id} onClick={() => { this.props.shuffle(this.props.char); this.props.handleScores(this.props.id) }}>\n                <div className=\"img-container\">\n                    <img src={this.props.image} alt={this.props.name} />\n                </div>\n            </div>\n        )\n    };\n\n};\n\n// const GameCard = (props) => {\n\n//     return (\n//         <div className=\"card\" key={props.id} data-id={props.id} onClick={() => { props.shuffle(props.char); props.incrementScore(props.id) }}>\n//             <div className=\"img-container\">\n//                 <img src={props.image} alt={props.name} />\n//             </div>\n//         </div>\n//     )\n// }\n\nexport default GameCard;","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = (props) => {\n    return (\n        <footer className=\"footer mt-auto py-3 bg-primary\">\n            <div className=\"bottom\">{props.children}</div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\n// import Wrapper from \"./components/Wrapper/wrapper\";\nimport Title from \"./components/Title/title\";\nimport Scoreboard from './components/Scoreboard/scoreboard';\nimport dbzChars from \"./dbzChars.json\";\nimport GameCard from './components/GameCard/gamecard';\nimport Footer from './components/Footer/footer';\n\nclass App extends Component {\n\n  state = {\n    dbzChars,\n    score: 0,\n    topScore: 0,\n    topScoreArr: [],\n    alreadyclicked: []\n  };\n\n  componentDidMount() {\n    this.shuffle(this.state.dbzChars)\n  };\n\n  shuffle = arr => {\n\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    this.setState({ arr });\n  };\n\n  handleScores = (id) => {\n\n    this.setState(prevState => ({ alreadyclicked: [...prevState.alreadyclicked, id] }));\n\n    if (this.state.alreadyclicked.indexOf(id) === -1) {\n      this.setState({\n        score: this.state.score + 1,\n        topScoreArr: this.state.topScoreArr.concat(this.state.score + 1)\n      },\n        () => {\n          this.setState({ topScore: Math.max(...this.state.topScoreArr) });\n        });\n    } else {\n      this.setState({ score: 0, alreadyclicked: [] });\n    };\n\n  };\n\n  render() {\n\n    return (\n      // <Wrapper>\n      <div>\n        <Scoreboard\n          score={this.state.score}\n          topScore={this.state.topScore} />\n        <Title>Clicky Game!</Title>\n        <main className=\"container\">\n          {this.state.dbzChars.map(char => (\n            <GameCard\n              shuffle={this.shuffle}\n              id={char.id}\n              key={char.id}\n              name={char.name}\n              image={char.image}\n              char={dbzChars}\n              handleScores={this.handleScores}\n            />\n          ))}\n        </main>\n        <Footer>Copyright 2019</Footer>\n      </div >\n      // </Wrapper>\n    );\n\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}